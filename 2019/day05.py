import sys

test = (
    [1101,100,-1,4,0,0],
    [1,9,10,3,2,3,11,0,99,30,40,50],
    [1,0,0,0,99],
    [2,3,0,3,99],
    [2,4,4,5,99,0],
    [1,1,1,4,99,5,6,0,99],
    [3,9,8,9,10,9,4,9,99,-1,8],
    [3,9,7,9,10,9,4,9,99,-1,8],
    [3,3,1108,-1,8,3,4,3,99],
    [3,3,1107,-1,8,3,4,3,99],
    [3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9],
    [3,3,1105,-1,9,1101,0,0,12,4,12,99,1]
)

t2 = [3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,
    1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,
    999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99]

real = [
3,225,1,225,6,6,1100,1,238,225,104,0,1102,35,92,225,1101,25,55,225,1102,47,36,225,1102,17,35,225,1,165,18,224,1001,224,-106,224,4,224,102,8,223,223,1001,224,3,224,1,223,224,223,1101,68,23,224,101,-91,224,224,4,224,102,8,223,223,101,1,224,224,1,223,224,223,2,217,13,224,1001,224,-1890,224,4,224,102,8,223,223,1001,224,6,224,1,224,223,223,1102,69,77,224,1001,224,-5313,224,4,224,1002,223,8,223,101,2,224,224,1,224,223,223,102,50,22,224,101,-1800,224,224,4,224,1002,223,8,223,1001,224,5,224,1,224,223,223,1102,89,32,225,1001,26,60,224,1001,224,-95,224,4,224,102,8,223,223,101,2,224,224,1,223,224,223,1102,51,79,225,1102,65,30,225,1002,170,86,224,101,-2580,224,224,4,224,102,8,223,223,1001,224,6,224,1,223,224,223,101,39,139,224,1001,224,-128,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1102,54,93,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1008,677,677,224,1002,223,2,223,1005,224,329,101,1,223,223,7,677,677,224,102,2,223,223,1006,224,344,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,359,1001,223,1,223,7,677,226,224,1002,223,2,223,1005,224,374,1001,223,1,223,1107,677,226,224,1002,223,2,223,1005,224,389,1001,223,1,223,107,226,677,224,102,2,223,223,1005,224,404,1001,223,1,223,1108,226,677,224,1002,223,2,223,1006,224,419,101,1,223,223,107,226,226,224,102,2,223,223,1005,224,434,1001,223,1,223,108,677,226,224,1002,223,2,223,1006,224,449,101,1,223,223,108,226,226,224,102,2,223,223,1006,224,464,1001,223,1,223,1007,226,226,224,1002,223,2,223,1005,224,479,101,1,223,223,8,677,226,224,1002,223,2,223,1006,224,494,101,1,223,223,1007,226,677,224,102,2,223,223,1006,224,509,101,1,223,223,7,226,677,224,1002,223,2,223,1005,224,524,101,1,223,223,107,677,677,224,102,2,223,223,1005,224,539,101,1,223,223,1008,677,226,224,1002,223,2,223,1005,224,554,1001,223,1,223,1008,226,226,224,1002,223,2,223,1006,224,569,1001,223,1,223,1108,226,226,224,102,2,223,223,1005,224,584,101,1,223,223,1107,226,677,224,1002,223,2,223,1005,224,599,1001,223,1,223,8,226,677,224,1002,223,2,223,1006,224,614,1001,223,1,223,1108,677,226,224,102,2,223,223,1005,224,629,1001,223,1,223,8,226,226,224,1002,223,2,223,1005,224,644,1001,223,1,223,1107,677,677,224,1002,223,2,223,1005,224,659,1001,223,1,223,1007,677,677,224,1002,223,2,223,1005,224,674,101,1,223,223,4,223,99,226 
]

TRACE = 'trace' in sys.argv
TESTS = 'test' in sys.argv
inputs = [int(k) for k in sys.argv[1:] if k[0] >= '0' and k[0] <= '9']

def get_input():
    if not inputs:
        return int( input('Number input: ') )
    if len(inputs) > 1:
        return inputs.pop(0)
    return inputs[0]

# The IntCode computer.

class Program(object):
    def __init__(self, array):
        self.pgm = array
        self.pc = 0

    def opcode(self):
        opc = self.pgm[self.pc]
        self.modes = [(opc//100)%10, (opc//1000)%10, opc//10000]
        if TRACE:
            print( f"At {self.pc}: {opc}" )
        self.pc += 1
        return opc % 100

    def fetch(self):
        nxtmode = self.modes.pop(0)
        operand = self.pgm[self.pc]
        self.pc += 1
        if TRACE:
            print( "fetch", operand if nxtmode else self.pgm[operand] )
        return operand if nxtmode else self.pgm[operand]

    def store(self, n):
        if TRACE:
            print( f"store {n} at {self.pgm[self.pc]}" )
        self.pgm[self.pgm[self.pc]] = n
        self.pc += 1

    def jump(self):
        self.pc = self.fetch()

    def skip(self):
        self.pc += 1

    def run(self):
        while 1:
            opcode = self.opcode()
            if opcode == 1:
                self.store( self.fetch() + self.fetch() )
            elif opcode == 2:
                self.store( self.fetch() * self.fetch() )
            elif opcode == 3:
                self.store( get_input() )
            elif opcode == 4:
                print( "output", self.fetch() )
            elif opcode == 5:  # JT
                if self.fetch():
                    self.jump()
                else:
                    self.skip()
            elif opcode == 6:  # JF
                if not self.fetch():
                    self.jump()
                else:
                    self.skip()
            elif opcode == 7:  # JLT
                self.store( 1 if self.fetch() < self.fetch() else 0 )
            elif opcode == 8:  # JE
                self.store( 1 if self.fetch() == self.fetch() else 0 )
            elif opcode == 99:
                if TESTS or TRACE:
                    print( self.pgm )
                return 1
            else:
                print( f"Explode, pc={self.pc}, self={self.self}" )
                return None

if TESTS:
    for p in test:
        print( "" )
        Program(p).run() 

    Program(t2).run()

# For part 1, enter 1.  For part 2, enter 5.

else:
    Program(real).run()
