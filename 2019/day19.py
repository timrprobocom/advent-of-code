import sys
from intcode import Program
from tools import Point



TRACE = 'trace' in sys.argv

# Run the program once to get the path.

real = [ 
109,424,203,1,21102,11,1,0,1106,0,282,21102,18,1,0,1105,1,259,1202,1,1,221,203,1,21102,31,1,0,1106,0,282,21101,38,0,0,1106,0,259,21002,23,1,2,22102,1,1,3,21102,1,1,1,21102,1,57,0,1105,1,303,2101,0,1,222,21002,221,1,3,20101,0,221,2,21101,0,259,1,21102,1,80,0,1105,1,225,21102,1,8,2,21101,91,0,0,1106,0,303,1202,1,1,223,21002,222,1,4,21102,1,259,3,21101,225,0,2,21101,225,0,1,21101,0,118,0,1105,1,225,21001,222,0,3,21101,0,48,2,21102,133,1,0,1106,0,303,21202,1,-1,1,22001,223,1,1,21102,1,148,0,1105,1,259,1201,1,0,223,20101,0,221,4,21001,222,0,3,21101,0,6,2,1001,132,-2,224,1002,224,2,224,1001,224,3,224,1002,132,-1,132,1,224,132,224,21001,224,1,1,21102,1,195,0,105,1,108,20207,1,223,2,21001,23,0,1,21101,-1,0,3,21101,0,214,0,1105,1,303,22101,1,1,1,204,1,99,0,0,0,0,109,5,2101,0,-4,249,21201,-3,0,1,22102,1,-2,2,21202,-1,1,3,21102,1,250,0,1106,0,225,21201,1,0,-4,109,-5,2106,0,0,109,3,22107,0,-2,-1,21202,-1,2,-1,21201,-1,-1,-1,22202,-1,-2,-2,109,-3,2106,0,0,109,3,21207,-2,0,-1,1206,-1,294,104,0,99,22101,0,-2,-2,109,-3,2106,0,0,109,5,22207,-3,-4,-1,1206,-1,346,22201,-4,-3,-4,21202,-3,-1,-1,22201,-4,-1,2,21202,2,-1,-1,22201,-4,-1,1,22102,1,-2,3,21101,0,343,0,1105,1,303,1105,1,415,22207,-2,-3,-1,1206,-1,387,22201,-3,-2,-3,21202,-2,-1,-1,22201,-3,-1,3,21202,3,-1,-1,22201,-3,-1,2,22101,0,-4,1,21101,384,0,0,1106,0,303,1106,0,415,21202,-4,-1,-4,22201,-4,-3,-4,22202,-3,-2,-2,22202,-2,-4,-4,22202,-3,-2,-3,21202,-4,-1,-2,22201,-3,-2,1,21201,1,0,-4,109,-5,2106,0,0]

def inside(x,y):
    pgm = Program(real)
    pgm.push( x )
    pgm.push( y )
    pgm.run()
    return pgm.pop()

def part1():
    grid = []
    sumx = 0
    for y in range(25):
        row = []
        for x in range(50):
            val = inside( x, y )
            sumx += val
            row.append( '.#'[val] )
        grid.append( ''.join(row) )

    print( '\n'.join(grid))
    print( "Part 1:", sumx )

# So...
# Beam zero point  (5, 3)
# Top beam ends (1000,352) slope = 349/1000
# Bot beam ends (1000,476) slope = 473/1000
#
# Top beam is y = 349/1000 x + 3
# Bot beam is y = 473/1000 x + 3
# Height is 124x/1000
# To be 100 tall, that's x=806
#   That's y=281

def topy(x):
    return 349 * x // 1000 + 3

def boty(x):
    return 473 * x // 1000 + 3

assert( inside(5,2) )
assert( inside(48,18) )
assert( inside(48,19) )
assert( inside(48,20) )
assert( inside(48,21) )
assert( inside(48,22) )

def check(x,y):
    return inside(x,y)  \
        and inside(x+99,y) \
        and inside(x,y+99) \
        and inside(x+99,y+99)

def part2():
    y0 = 0
    y1 = 0
    for x in range(1000,1300):
        # Find the top of the beam.
        while not inside( x, y0 ):
            y0 += 1

        # Find the bottom of the beam.
        if y1 < y0:
            y1 = y0 + 1
        while inside( x, y1 ):
            y1 += 1

#        print( x, y0, y1-y0 )

        # (x,y0) and (x,y1-1) are inside.  (x,y1) is outside.

        y = y1 - 100

        if check(x,y):
            print( "Part 2:", x * 10000 + y )
            break

part1()
part2()


