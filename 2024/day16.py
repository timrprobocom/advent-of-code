import os
import sys
import re
from collections import defaultdict
import heapq

test = """\
###############
#.......#....E#
#.#.###.#.###.#
#.....#.#...#.#
#.###.#####.#.#
#.#.#.......#.#
#.#.#####.###.#
#...........#.#
###.#.#####.#.#
#...#.....#.#.#
#.#.#.###.#.#.#
#.....#...#.#.#
#.###.#.#.#.#.#
#S..#.....#...#
###############"""

test2 = """\
#################
#...#...#...#..E#
#.#.#.#.#.#.#.#.#
#.#.#.#...#...#.#
#.#.#.#.###.#.#.#
#...#.#.#.....#.#
#.#.#.#.#.#####.#
#.#...#.#.#.....#
#.#.#####.#.###.#
#.#.#.......#...#
#.#.###.#####.###
#.#.#...#.....#.#
#.#.#.#####.###.#
#.#.#.........#.#
#.#.#.#########.#
#S#.............#
#################"""

day = os.path.splitext(os.path.basename(__file__))[0]

TEST = 'test' in sys.argv
DEBUG = 'debug' in sys.argv

if TEST:
    data = test.splitlines()
else:
    data = open(day+'.txt').read().splitlines()

WIDTH = len(data[0])
HEIGHT = len(data)

walls = set()
start = None
finish = None
for y, line in enumerate(data):
    for x, c in enumerate(line):
        if c == '#':
            walls.add((x,y))
        elif c == 'S':
            start = (x,y)
        elif c == 'E':
            finish = (x,y)

other = [
(1, 139), (2, 139), (3, 139), (4, 139), (5, 139), (6, 139), (7, 139), (7, 138), 
(7, 137), (7, 136), (7, 135), (8, 135), (9, 135), (9, 134), (9, 133), (10, 133), 
(11, 133), (11, 132), (11, 131), (10, 131), (9, 131), (8, 131), (7, 131), 
(7, 130), (7, 129), (7, 128), (7, 127), (7, 126), (7, 125), (8, 125),
(9, 125), (10, 125), (11, 125), (12, 125), (13, 125), (14, 125), (15, 125),
(16, 125), (17, 125), (18, 125), (19, 125), (19, 126), (19, 127), (19, 128),
(19, 129), (20, 129), (21, 129), (22, 129), (23, 129), (24, 129), (25, 129),
(26, 129), (27, 129), (28, 129), (29, 129), (30, 129), (31, 129), (31, 128),
(31, 127), (31, 126), (31, 125), (31, 124), (31, 123), (32, 123), (33, 123),
(34, 123), (35, 123), (35, 124), (35, 125), (36, 125), (37, 125), (37, 124),
(37, 123), (37, 122), (37, 121), (36, 121), (35, 121), (34, 121), (33, 121),
(33, 120), (33, 119), (34, 119), (35, 119), (36, 119), (37, 119), (38, 119),
(39, 119), (40, 119), (41, 119), (41, 118), (41, 117), (40, 117), (39, 117),
(38, 117), (37, 117), (37, 116), (37, 115), (38, 115), (39, 115), (40, 115),
(41, 115), (42, 115), (43, 115), (43, 114), (43, 113), (43, 112), (43, 111),
(44, 111), (45, 111), (45, 112), (45, 113), (45, 114), (45, 115), (45, 116),
(45, 117), (45, 118), (45, 119), (45, 120), (45, 121), (45, 122), (45, 123),
(45, 124), (45, 125), (46, 125), (47, 125), (48, 125), (49, 125), (50, 125),
(51, 125), (52, 125), (53, 125), (54, 125), (55, 125), (55, 126), (55, 127),
(55, 128), (55, 129), (54, 129), (53, 129), (53, 130), (53, 131), (53, 132),
(53, 133), (54, 133), (55, 133), (55, 132), (55, 131), (56, 131), (57, 131),
(57, 130), (57, 129), (58, 129), (59, 129), (59, 130), (59, 131), (59, 132),
(59, 133), (59, 134), (59, 135), (60, 135), (61, 135), (62, 135), (63, 135),
(64, 135), (65, 135), (66, 135), (67, 135), (68, 135), (69, 135), (70, 135),
(71, 135), (72, 135), (73, 135), (73, 136), (73, 137), (74, 137), (75, 137),
(75, 136), (75, 135), (76, 135), (77, 135), (78, 135), (79, 135), (80, 135),
(81, 135), (82, 135), (83, 135), (83, 134), (83, 133), (83, 132), (83, 131),
(83, 130), (83, 129), (84, 129), (85, 129), (86, 129), (87, 129), (88, 129),
(89, 129), (90, 129), (91, 129), (92, 129), (93, 129), (94, 129), (95, 129),
(96, 129), (97, 129), (98, 129), (99, 129), (100, 129), (101, 129), (101, 130), 
(101, 131), (102, 131), (103, 131), (104, 131), (105, 131), (106, 131),
(107, 131), (108, 131), (109, 131), (110, 131), (111, 131), (112, 131),
(113, 131), (114, 131), (115, 131), (115, 132), (115, 133), (115, 134),
(115, 135), (115, 136), (115, 137), (115, 138), (115, 139), (116, 139),
(117, 139), (117, 138), (117, 137), (118, 137), (119, 137), (119, 138),
(119, 139), (120, 139), (121, 139), (122, 139), (123, 139), (124, 139),
(125, 139), (125, 138), (125, 137), (125, 137), (125, 135), (125, 134),
(125, 133), (126, 133), (127, 133), (128, 133), (129, 133), (129, 132),
(129, 131), (129, 130), (129, 129), (130, 129), (131, 129), (131, 130),
(131, 131), (131, 132), (131, 133), (132, 133), (133, 133), (133, 132),
(133, 131), (133, 130), (133, 129), (133, 128), (133, 127), (133, 126),
(133, 125), (133, 124), (133, 123), (133, 122), (133, 121), (133, 120),
(133, 119), (133, 118), (133, 117), (133, 116), (133, 115), (133, 114),
(133, 113), (132, 113), (131, 113), (131, 114), (131, 115), (130, 115), 
(129, 115), (129, 114), (129, 113), (129, 112), (129, 111), (129, 110), (129, 109),
(129, 108), (129, 107), (129, 106), (129, 105), (130, 105), (131, 105), 
(131, 104), (131, 103), (130, 103), (129, 103), (129, 102), (129, 101), (129, 100),
(129, 99), (128, 99), (127, 99), (127, 98), (127, 97), (127, 96), (127, 95),
(128, 95), (129, 95), (130, 95), (131, 95), (131, 94), (131, 93), (131, 92),
(131, 91), (131, 90), (131, 89), (131, 88), (131, 87), (131, 86), (131, 85),
(131, 84), (131, 83), (131, 82), (131, 81), (131, 80), (131, 79), (131, 78),
(131, 77), (131, 76), (131, 75), (131, 74), (131, 73), (131, 72), (131, 71),
(131, 70), (131, 69), (131, 68), (131, 67), (131, 66), (131, 65), (131, 64),
(131, 63), (131, 62), (131, 61), (131, 60), (131, 59), (130, 59), (129, 59),
(129, 58), (129, 57), (129, 56), (129, 55), (129, 54), (129, 53), (130, 53),
(131, 53), (132, 53), (133, 53), (134, 53), (135, 53), (136, 53), (137, 53),
(137, 52), (137, 51), (137, 50), (137, 49), (137, 48), (137, 47), (137, 46),
(137, 45), (137, 44), (137, 43), (137, 42), (137, 41), (137, 40), (137, 39),
(137, 38), (137, 37), (137, 36), (137, 35), (137, 34), (137, 33), (137, 32),
(137, 31), (137, 30), (137, 29), (138, 29), (139, 29), (139, 28), (139, 27),
(139, 26), (139, 25), (139, 24), (139, 23), (139, 22), (139, 21), (139, 20),
(139, 19), (139, 18), (139, 17), (139, 16), (139, 15), (138, 15), (137, 15),
(136, 15), (135, 15), (135, 14), (135, 13), (136, 13), (137, 13), (137, 12),
(137, 11), (136, 11), (135, 11), (134, 11), (133, 11), (132, 11), (131, 11),
(130, 11), (129, 11), (128, 11), (127, 11), (127, 10), (127, 9), (127, 8),
(127, 7), (127, 6), (127, 5), (127, 4), (127, 3), (127, 2), (127, 1), (128,
1), (129, 1), (130, 1), (131, 1), (132, 1), (133, 1), (134, 1), (135, 1),
(136, 1), (137, 1), (138, 1), (139, 1)
]

def printgrid(path):
    xpath=set(path)
    xother=set(other)
    for y,row in enumerate(data):
        s = []
        for x,c in enumerate(row):
            if (x,y) in xother:
                s.append( 'z' )
            elif (x,y) in xpath:
                s.append( 'O' )
            else:
                s.append( c )
        print(''.join(s))

def left(pt):
    return (pt[1],-pt[0])
def right(pt):
    return (-pt[1],pt[0])

def part1(walls):
    point = start
    dir = (1,0)
    queue = [(0, point, dir, [start])]
    visited = {}
    while queue:
        score,point,dir,path = heapq.heappop(queue)
        if DEBUG:
            print(score)
        visited[point] = score
        if point[0] > 126 and point[1] == 53:
            print("At",point,"score",score)
        if point == finish:
            print("FINISH",point,dir,score)
            #for pt in path:
            #    print(pt)
            printgrid(path)                  
            return score
        for pain,(dx,dy) in (1,dir),(1001,right(dir)),(1001,left(dir)):
            p2 = (point[0]+dx,point[1]+dy)
            if p2 not in walls and visited.get(p2,999999) > score+pain:
                heapq.heappush(queue, (score+pain, p2, (dx,dy), path+[p2]))
    return -1

def part2(walls):
    point = start
    dir = (1,0)
    visited = set([point])
    queue = [(0,point, dir, visited)]
    lowscore = 99999999
    wins = set()
    while queue:
        score,point,dir,visited = heapq.heappop(queue)
        print(score)
        if score > lowscore:
            break
        if point == finish:
            wins = wins.union(visited)
            print("FINISH",point,dir,score)
            lowscore = score
        if point in walls:
            continue
        
        # If I get to a point we've been to before with the same score, 
                               
        for pain,(dx,dy) in (1,dir),(1001,left(dir)),(1001,right(dir)):
            p2 = (point[0]+dx,point[1]+dy)
            #if p2 not in visited and p2 not in walls:
            if p2 not in walls:
                print("ok to go",p2,dir)
                heapq.heappush(queue, (score+pain, p2, (dx,dy), visited.union(set([p2]))))
    return len(wins)

print("Part 1:", part1(walls))
#print("Part 2:", part2(walls))